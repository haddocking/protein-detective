# coding: utf-8

"""
Programmatic access API endpoints

<p>         Welcome to the interactive documentation page for the         AlphaFold Protein Structure Database Application Programming Interface (API).         The API provides a convenient and efficient way for developers to         programmatically access  metadata related to all the archived AlphaFold         predictions.         </p>         <p>         With this API, you can easily retrieve information about protein structures         predicted by AlphaFold, such as URLs to model files (mmCIF, bCIF and PDB),         models quality estimates, and other useful information. All the API endpoints         are keyed on UniProt accessions. The API is designed to be easy to integrate         into your own software, and we provide documentation and code examples         below to help you get started.</p>

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class UniprotEntry(BaseModel):
    """
    UniprotEntry
    """  # noqa: E501

    ac: StrictStr = Field(description="UniProt accession")
    id: Optional[StrictStr] = None
    uniprot_checksum: Optional[StrictStr] = None
    sequence_length: Optional[StrictInt] = None
    segment_start: Optional[StrictInt] = None
    segment_end: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "ac",
        "id",
        "uniprot_checksum",
        "sequence_length",
        "segment_start",
        "segment_end",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniprotEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict["id"] = None

        # set to None if uniprot_checksum (nullable) is None
        # and model_fields_set contains the field
        if self.uniprot_checksum is None and "uniprot_checksum" in self.model_fields_set:
            _dict["uniprot_checksum"] = None

        # set to None if sequence_length (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_length is None and "sequence_length" in self.model_fields_set:
            _dict["sequence_length"] = None

        # set to None if segment_start (nullable) is None
        # and model_fields_set contains the field
        if self.segment_start is None and "segment_start" in self.model_fields_set:
            _dict["segment_start"] = None

        # set to None if segment_end (nullable) is None
        # and model_fields_set contains the field
        if self.segment_end is None and "segment_end" in self.model_fields_set:
            _dict["segment_end"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniprotEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in UniprotEntry) in the input: " + _key)

        _obj = cls.model_validate(
            {
                "ac": obj.get("ac"),
                "id": obj.get("id"),
                "uniprot_checksum": obj.get("uniprot_checksum"),
                "sequence_length": obj.get("sequence_length"),
                "segment_start": obj.get("segment_start"),
                "segment_end": obj.get("segment_end"),
            }
        )
        return _obj
