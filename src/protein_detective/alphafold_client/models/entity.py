# coding: utf-8

"""
Programmatic access API endpoints

<p>         Welcome to the interactive documentation page for the         AlphaFold Protein Structure Database Application Programming Interface (API).         The API provides a convenient and efficient way for developers to         programmatically access  metadata related to all the archived AlphaFold         predictions.         </p>         <p>         With this API, you can easily retrieve information about protein structures         predicted by AlphaFold, such as URLs to model files (mmCIF, bCIF and PDB),         models quality estimates, and other useful information. All the API endpoints         are keyed on UniProt accessions. The API is designed to be easy to integrate         into your own software, and we provide documentation and code examples         below to help you get started.</p>

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from protein_detective.alphafold_client.models.entity_poly_type import EntityPolyType
from protein_detective.alphafold_client.models.entity_type import EntityType
from protein_detective.alphafold_client.models.identifier_category import IdentifierCategory
from typing import Optional, Set
from typing_extensions import Self


class Entity(BaseModel):
    """
    Entity
    """  # noqa: E501

    entity_type: EntityType
    entity_poly_type: Optional[EntityPolyType] = None
    identifier: Optional[StrictStr] = None
    identifier_category: Optional[IdentifierCategory] = None
    description: StrictStr = Field(description="A textual label of the molecule")
    chain_ids: List[StrictStr]
    __properties: ClassVar[List[str]] = [
        "entity_type",
        "entity_poly_type",
        "identifier",
        "identifier_category",
        "description",
        "chain_ids",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Entity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if entity_poly_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_poly_type is None and "entity_poly_type" in self.model_fields_set:
            _dict["entity_poly_type"] = None

        # set to None if identifier (nullable) is None
        # and model_fields_set contains the field
        if self.identifier is None and "identifier" in self.model_fields_set:
            _dict["identifier"] = None

        # set to None if identifier_category (nullable) is None
        # and model_fields_set contains the field
        if self.identifier_category is None and "identifier_category" in self.model_fields_set:
            _dict["identifier_category"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Entity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Entity) in the input: " + _key)

        _obj = cls.model_validate(
            {
                "entity_type": obj.get("entity_type"),
                "entity_poly_type": obj.get("entity_poly_type"),
                "identifier": obj.get("identifier"),
                "identifier_category": obj.get("identifier_category"),
                "description": obj.get("description"),
                "chain_ids": obj.get("chain_ids"),
            }
        )
        return _obj
