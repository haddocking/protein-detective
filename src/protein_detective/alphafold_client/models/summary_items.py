# coding: utf-8

"""
Programmatic access API endpoints

<p>         Welcome to the interactive documentation page for the         AlphaFold Protein Structure Database Application Programming Interface (API).         The API provides a convenient and efficient way for developers to         programmatically access  metadata related to all the archived AlphaFold         predictions.         </p>         <p>         With this API, you can easily retrieve information about protein structures         predicted by AlphaFold, such as URLs to model files (mmCIF, bCIF and PDB),         models quality estimates, and other useful information. All the API endpoints         are keyed on UniProt accessions. The API is designed to be easy to integrate         into your own software, and we provide documentation and code examples         below to help you get started.</p>

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from protein_detective.alphafold_client.models.confidence_type import ConfidenceType
from protein_detective.alphafold_client.models.ensemble_sample_format import EnsembleSampleFormat
from protein_detective.alphafold_client.models.entity import Entity
from protein_detective.alphafold_client.models.experimental_method import ExperimentalMethod
from protein_detective.alphafold_client.models.model_category import ModelCategory
from protein_detective.alphafold_client.models.model_format import ModelFormat
from protein_detective.alphafold_client.models.model_type import ModelType
from protein_detective.alphafold_client.models.oligomeric_state import OligomericState
from typing import Optional, Set
from typing_extensions import Self


class SummaryItems(BaseModel):
    """
    SummaryItems
    """  # noqa: E501

    model_identifier: StrictStr = Field(description="Identifier of the model, such as PDB id")
    model_category: ModelCategory
    model_url: StrictStr = Field(description="URL of the model coordinates")
    model_format: ModelFormat
    model_type: Optional[ModelType] = None
    model_page_url: Optional[StrictStr] = None
    provider: StrictStr = Field(description="Name of the model provider")
    number_of_conformers: Optional[Union[StrictFloat, StrictInt]] = None
    ensemble_sample_url: Optional[StrictStr] = None
    ensemble_sample_format: Optional[EnsembleSampleFormat] = None
    created: StrictStr = Field(description="Date of release of model generation in the format of YYYY-MM-DD")
    sequence_identity: Union[StrictFloat, StrictInt] = Field(
        description="Sequence identity in the range of [0,1] of the model to the UniProt sequence "
    )
    uniprot_start: StrictInt = Field(
        description="1-indexed first residue of the model according to UniProt sequence numbering "
    )
    uniprot_end: StrictInt = Field(
        description="1-indexed last residue of the model according to UniProt sequence numbering "
    )
    coverage: Union[StrictFloat, StrictInt] = Field(
        description="Fraction in range of [0, 1] of the UniProt sequence covered by the model.  This is calculated as (uniprot_end - uniprot_start + 1) / uniprot_sequence_length "
    )
    experimental_method: Optional[ExperimentalMethod] = None
    resolution: Optional[Union[StrictFloat, StrictInt]] = None
    confidence_type: Optional[ConfidenceType] = None
    confidence_version: Optional[StrictStr] = None
    confidence_avg_local_score: Optional[Union[StrictFloat, StrictInt]] = None
    oligomeric_state: Optional[OligomericState] = None
    preferred_assembly_id: Optional[StrictStr] = None
    entities: List[Entity] = Field(description="A list of molecular entities in the model")
    __properties: ClassVar[List[str]] = [
        "model_identifier",
        "model_category",
        "model_url",
        "model_format",
        "model_type",
        "model_page_url",
        "provider",
        "number_of_conformers",
        "ensemble_sample_url",
        "ensemble_sample_format",
        "created",
        "sequence_identity",
        "uniprot_start",
        "uniprot_end",
        "coverage",
        "experimental_method",
        "resolution",
        "confidence_type",
        "confidence_version",
        "confidence_avg_local_score",
        "oligomeric_state",
        "preferred_assembly_id",
        "entities",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SummaryItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict["entities"] = _items
        # set to None if model_type (nullable) is None
        # and model_fields_set contains the field
        if self.model_type is None and "model_type" in self.model_fields_set:
            _dict["model_type"] = None

        # set to None if model_page_url (nullable) is None
        # and model_fields_set contains the field
        if self.model_page_url is None and "model_page_url" in self.model_fields_set:
            _dict["model_page_url"] = None

        # set to None if number_of_conformers (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_conformers is None and "number_of_conformers" in self.model_fields_set:
            _dict["number_of_conformers"] = None

        # set to None if ensemble_sample_url (nullable) is None
        # and model_fields_set contains the field
        if self.ensemble_sample_url is None and "ensemble_sample_url" in self.model_fields_set:
            _dict["ensemble_sample_url"] = None

        # set to None if ensemble_sample_format (nullable) is None
        # and model_fields_set contains the field
        if self.ensemble_sample_format is None and "ensemble_sample_format" in self.model_fields_set:
            _dict["ensemble_sample_format"] = None

        # set to None if experimental_method (nullable) is None
        # and model_fields_set contains the field
        if self.experimental_method is None and "experimental_method" in self.model_fields_set:
            _dict["experimental_method"] = None

        # set to None if resolution (nullable) is None
        # and model_fields_set contains the field
        if self.resolution is None and "resolution" in self.model_fields_set:
            _dict["resolution"] = None

        # set to None if confidence_type (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_type is None and "confidence_type" in self.model_fields_set:
            _dict["confidence_type"] = None

        # set to None if confidence_version (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_version is None and "confidence_version" in self.model_fields_set:
            _dict["confidence_version"] = None

        # set to None if confidence_avg_local_score (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_avg_local_score is None and "confidence_avg_local_score" in self.model_fields_set:
            _dict["confidence_avg_local_score"] = None

        # set to None if oligomeric_state (nullable) is None
        # and model_fields_set contains the field
        if self.oligomeric_state is None and "oligomeric_state" in self.model_fields_set:
            _dict["oligomeric_state"] = None

        # set to None if preferred_assembly_id (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_assembly_id is None and "preferred_assembly_id" in self.model_fields_set:
            _dict["preferred_assembly_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SummaryItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SummaryItems) in the input: " + _key)

        _obj = cls.model_validate(
            {
                "model_identifier": obj.get("model_identifier"),
                "model_category": obj.get("model_category"),
                "model_url": obj.get("model_url"),
                "model_format": obj.get("model_format"),
                "model_type": obj.get("model_type"),
                "model_page_url": obj.get("model_page_url"),
                "provider": obj.get("provider"),
                "number_of_conformers": obj.get("number_of_conformers"),
                "ensemble_sample_url": obj.get("ensemble_sample_url"),
                "ensemble_sample_format": obj.get("ensemble_sample_format"),
                "created": obj.get("created"),
                "sequence_identity": obj.get("sequence_identity"),
                "uniprot_start": obj.get("uniprot_start"),
                "uniprot_end": obj.get("uniprot_end"),
                "coverage": obj.get("coverage"),
                "experimental_method": obj.get("experimental_method"),
                "resolution": obj.get("resolution"),
                "confidence_type": obj.get("confidence_type"),
                "confidence_version": obj.get("confidence_version"),
                "confidence_avg_local_score": obj.get("confidence_avg_local_score"),
                "oligomeric_state": obj.get("oligomeric_state"),
                "preferred_assembly_id": obj.get("preferred_assembly_id"),
                "entities": [Entity.from_dict(_item) for _item in obj["entities"]]
                if obj.get("entities") is not None
                else None,
            }
        )
        return _obj
