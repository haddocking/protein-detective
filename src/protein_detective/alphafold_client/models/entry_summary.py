# coding: utf-8

"""
Programmatic access API endpoints

<p>         Welcome to the interactive documentation page for the         AlphaFold Protein Structure Database Application Programming Interface (API).         The API provides a convenient and efficient way for developers to         programmatically access  metadata related to all the archived AlphaFold         predictions.         </p>         <p>         With this API, you can easily retrieve information about protein structures         predicted by AlphaFold, such as URLs to model files (mmCIF, bCIF and PDB),         models quality estimates, and other useful information. All the API endpoints         are keyed on UniProt accessions. The API is designed to be easy to integrate         into your own software, and we provide documentation and code examples         below to help you get started.</p>

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class EntrySummary(BaseModel):
    """
    EntrySummary
    """  # noqa: E501

    entry_id: StrictStr = Field(alias="entryId")
    gene: Optional[StrictStr] = None
    sequence_checksum: Optional[StrictStr] = Field(default=None, alias="sequenceChecksum")
    sequence_version_date: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, alias="sequenceVersionDate"
    )
    uniprot_accession: StrictStr = Field(alias="uniprotAccession")
    uniprot_id: StrictStr = Field(alias="uniprotId")
    uniprot_description: StrictStr = Field(alias="uniprotDescription")
    tax_id: StrictInt = Field(alias="taxId")
    organism_scientific_name: StrictStr = Field(alias="organismScientificName")
    uniprot_start: StrictInt = Field(alias="uniprotStart")
    uniprot_end: StrictInt = Field(alias="uniprotEnd")
    uniprot_sequence: StrictStr = Field(alias="uniprotSequence")
    model_created_date: Annotated[str, Field(strict=True)] = Field(alias="modelCreatedDate")
    latest_version: StrictInt = Field(description="Current version of the model", alias="latestVersion")
    all_versions: List[StrictInt] = Field(description="List of all versions for the model", alias="allVersions")
    bcif_url: StrictStr = Field(alias="bcifUrl")
    cif_url: StrictStr = Field(alias="cifUrl")
    pdb_url: StrictStr = Field(alias="pdbUrl")
    pae_image_url: StrictStr = Field(alias="paeImageUrl")
    pae_doc_url: StrictStr = Field(alias="paeDocUrl")
    am_annotations_url: Optional[StrictStr] = Field(default=None, alias="amAnnotationsUrl")
    am_annotations_hg19_url: Optional[StrictStr] = Field(default=None, alias="amAnnotationsHg19Url")
    am_annotations_hg38_url: Optional[StrictStr] = Field(default=None, alias="amAnnotationsHg38Url")
    is_reviewed: Optional[StrictBool] = Field(default=None, alias="isReviewed")
    is_reference_proteome: Optional[StrictBool] = Field(default=None, alias="isReferenceProteome")
    __properties: ClassVar[List[str]] = [
        "entryId",
        "gene",
        "sequenceChecksum",
        "sequenceVersionDate",
        "uniprotAccession",
        "uniprotId",
        "uniprotDescription",
        "taxId",
        "organismScientificName",
        "uniprotStart",
        "uniprotEnd",
        "uniprotSequence",
        "modelCreatedDate",
        "latestVersion",
        "allVersions",
        "bcifUrl",
        "cifUrl",
        "pdbUrl",
        "paeImageUrl",
        "paeDocUrl",
        "amAnnotationsUrl",
        "amAnnotationsHg19Url",
        "amAnnotationsHg38Url",
        "isReviewed",
        "isReferenceProteome",
    ]

    @field_validator("sequence_version_date")
    def sequence_version_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[1-2][9|0][0-9]{2}-[0-1][0-9]-[0-3][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[1-2][9|0][0-9]{2}-[0-1][0-9]-[0-3][0-9]$/")
        return value

    @field_validator("model_created_date")
    def model_created_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[1-2][9|0][0-9]{2}-[0-1][0-9]-[0-3][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[1-2][9|0][0-9]{2}-[0-1][0-9]-[0-3][0-9]$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntrySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if gene (nullable) is None
        # and model_fields_set contains the field
        if self.gene is None and "gene" in self.model_fields_set:
            _dict["gene"] = None

        # set to None if sequence_checksum (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_checksum is None and "sequence_checksum" in self.model_fields_set:
            _dict["sequenceChecksum"] = None

        # set to None if sequence_version_date (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_version_date is None and "sequence_version_date" in self.model_fields_set:
            _dict["sequenceVersionDate"] = None

        # set to None if am_annotations_url (nullable) is None
        # and model_fields_set contains the field
        if self.am_annotations_url is None and "am_annotations_url" in self.model_fields_set:
            _dict["amAnnotationsUrl"] = None

        # set to None if am_annotations_hg19_url (nullable) is None
        # and model_fields_set contains the field
        if self.am_annotations_hg19_url is None and "am_annotations_hg19_url" in self.model_fields_set:
            _dict["amAnnotationsHg19Url"] = None

        # set to None if am_annotations_hg38_url (nullable) is None
        # and model_fields_set contains the field
        if self.am_annotations_hg38_url is None and "am_annotations_hg38_url" in self.model_fields_set:
            _dict["amAnnotationsHg38Url"] = None

        # set to None if is_reviewed (nullable) is None
        # and model_fields_set contains the field
        if self.is_reviewed is None and "is_reviewed" in self.model_fields_set:
            _dict["isReviewed"] = None

        # set to None if is_reference_proteome (nullable) is None
        # and model_fields_set contains the field
        if self.is_reference_proteome is None and "is_reference_proteome" in self.model_fields_set:
            _dict["isReferenceProteome"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntrySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in EntrySummary) in the input: " + _key)

        _obj = cls.model_validate(
            {
                "entryId": obj.get("entryId"),
                "gene": obj.get("gene"),
                "sequenceChecksum": obj.get("sequenceChecksum"),
                "sequenceVersionDate": obj.get("sequenceVersionDate"),
                "uniprotAccession": obj.get("uniprotAccession"),
                "uniprotId": obj.get("uniprotId"),
                "uniprotDescription": obj.get("uniprotDescription"),
                "taxId": obj.get("taxId"),
                "organismScientificName": obj.get("organismScientificName"),
                "uniprotStart": obj.get("uniprotStart"),
                "uniprotEnd": obj.get("uniprotEnd"),
                "uniprotSequence": obj.get("uniprotSequence"),
                "modelCreatedDate": obj.get("modelCreatedDate"),
                "latestVersion": obj.get("latestVersion"),
                "allVersions": obj.get("allVersions"),
                "bcifUrl": obj.get("bcifUrl"),
                "cifUrl": obj.get("cifUrl"),
                "pdbUrl": obj.get("pdbUrl"),
                "paeImageUrl": obj.get("paeImageUrl"),
                "paeDocUrl": obj.get("paeDocUrl"),
                "amAnnotationsUrl": obj.get("amAnnotationsUrl"),
                "amAnnotationsHg19Url": obj.get("amAnnotationsHg19Url"),
                "amAnnotationsHg38Url": obj.get("amAnnotationsHg38Url"),
                "isReviewed": obj.get("isReviewed"),
                "isReferenceProteome": obj.get("isReferenceProteome"),
            }
        )
        return _obj
